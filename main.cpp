#include <iostream>
#include <vector>

#include "algorithms/Algorithms.hpp"
#include "graph/Graph.hpp"

using namespace std;
using namespace shayg;

int main() {
    Graph g(false);

    vector<vector<int>> graph = {
        // clang-format off
    //      0        1        2        3      4        5     6      7        8        9       10       11
    /* 0*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 1*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 2*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 4*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 5*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 6*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 7*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 8*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /* 9*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /*10*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /*12*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE , NO_EDGE},
    /*13*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, 10     , -1     , 1      , NO_EDGE},
    /*14*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,10     , NO_EDGE, 10     , NO_EDGE, NO_EDGE},
    /*15*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,-1     , 10     , NO_EDGE, NO_EDGE, 2      },
    /*16*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,1      , NO_EDGE, NO_EDGE, NO_EDGE, NO_EDGE},
    /*17*/{NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE,NO_EDGE, NO_EDGE, 2      , NO_EDGE, NO_EDGE}
        // clang-format on
    };

    cout  << graph.size() << endl;
    cout  << graph[0].size() << endl;

    g.loadGraph(graph);
    cout << Algorithms::shortestPath(g, 12, 13) << endl; // "1->0->2"
    return 0;
}